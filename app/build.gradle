plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    id 'com.google.dagger.hilt.android'
}

android {
    namespace 'com.project.architecture'
    compileSdk 33

    defaultConfig {
        applicationId "com.project.architecture"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'armeabi-v7a'
            abiFilters 'arm64-v8a'
//            , 'arm64-v8a','armeabi'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    kapt {
        correctErrorTypes true
        javacOptions {
            option("-Xmaxerrs", 1000)
        }
    }
    buildFeatures {
        dataBinding true
    }

    lintOptions {
        abortOnError false
        quiet true
        ignoreWarnings true
        disable "InvalidPackage" ,"OldTargetApi" ,"IconDensities" ,"IconMissingDensityFolder"
    }

    flavorDimensions "APP"
    productFlavors {
        a1100 {
            dimension "APP"
            applicationId "com.kirito.a1100"
            version 1
            versionName "1"
        }
        a1101 {
            dimension "APP"
            applicationId "com.kirito.a1101"
            version 1
            versionName "1"
        }
    }

    applicationVariants.all { variant ->
        variant.javaCompileProvider.configure {
            dependsOn 'genDict'
        }
        variant.outputs.all{
            outputFileName = "kirito_app_${productFlavors[0].name}.apk"
        }
    }
}

task genDict {
    outputs.file('build/tmp/dict.txt')
    doLast {
        def r = new Random()
        def start = r.nextInt(1000) + 0x0100
        def end = start + 0x4000 // If the dictionary is too large, you can narrow the start~end range
        def chars = (start..end)
                .findAll { Character.isValidCodePoint(it) && Character.isJavaIdentifierPart(it) }
                .collect { String.valueOf(Character.toChars(it)) }
        int max = chars.size()
        def startChars = []
        def dict = []
        // Filter the char that can be used as the beginning of the java identifier
        for (int i = 0; i < max; i++) {
            char c = chars.get(i).charAt(0)
            if (Character.isJavaIdentifierStart(c)) {
                startChars << String.valueOf(c)
            }
        }
        def startSize = startChars.size()
        // Disrupt the order
        Collections.shuffle(chars, r)
        Collections.shuffle(startChars, r)
        // Spell two chars into one word to make the dictionary richer
        for (int i = 0; i < max; i++) {
            def m = r.nextInt(startSize - 3)
            def n = m + 3
            (m..n).each { j ->
                dict << (startChars.get(j) + chars.get(i))
            }
        }

        def f = outputs.files.getSingleFile()
        f.getParentFile().mkdirs()
        f.withWriter("UTF-8") {
            it.write(startChars.join(System.lineSeparator()))
            it.write(dict.join(System.lineSeparator()))
        }
    }
}


dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    //Hilt
    implementation "com.google.dagger:hilt-android:2.44"
    kapt "com.google.dagger:hilt-compiler:2.44"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
    implementation "androidx.navigation:navigation-compose:2.5.3"

    //Retrofit
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.10.0'

    //lifecycle
    implementation 'androidx.activity:activity-ktx:1.6.1'
    implementation "androidx.fragment:fragment-ktx:1.5.5"

}